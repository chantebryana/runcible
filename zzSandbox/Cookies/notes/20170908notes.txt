==	==	==	==	==	==	==	==	==	==
2017/09/08 FRIDAY

follow up on convo w/ Jim
re cookies and setting up server and looking ahead to next week

Jim volunteered to help me with setting up server for runcible, and any related road blocks.  one immediate / obvious roadblock is lack of cookies for security purposes. that reminded me that i need to think about that, and led me to consider why i may have been putting it off. some for good (get back into the groove of things after feeling intimidated and having a hard time logging enough time), some maybe for not so good (avoiding the problem instead of tackling it bit by bit or dividing into ever-smaller pieces). this is relevant for a big-kid-job environment where i want to pivot over to the boss's seeming whims or respond to what for me is an incomplete vision. i need to be accountable for the needs of the company, even if they're hard or confusing or frustrating. So there's that!

So what would I do if i re-emerged back into cookies? how should i handle it on monday (or during the weekend, should i choose to do some work over the next day or two -- a separate consideration...)

well, get back into the groove of things: remember what i've even done with cookies. Jim and i did a little bit of that -- refreshing my memory briefly on keys and saving page loads to database and tracking separate sessions (different browsers, different machines, different users, etc).  so, i think i'd take some time on monday to consider where i've been and to read up my old notes. and i'm assuming i'd feel overwhelmed, so i'll try to take some time to scale down the problem and try to divide it into simpler chunks. 

and, remember, it's low key and fun. no pressure no hassle no bad work!  just good and fun and coding for the joy of it! and remembering to take plenty of pomodoro breaks, but to also be mindful and conscious of my intentions and to hold myself accountable (and to be transparent w/ Jim in an attempt to acheive that end).

ok, enough for now. wish me luck!

==	==	==	==	==	==	==	==	==	==
2017/09/10 SUNDAY

Looking up old paper notes, it seems that I haven't touched cookies since 2017/08/24 Thursday (about 2.5 weeks ago).  I did work on the following day (a Friday), but I very purposefully began the day by telling myself I *wasn't* going to touch cookies -- too difficult!  

So I should definitely try to avoid running into that problem again.  Perhaps not over-thinking it? Dividing the problem into smaller sub-problems (and sub-sub-sub-problems if needed).  And pinging Jim liberally to get past any sticky points (versus trying to figure it all out all by myself all at once -- I don't have to be superwoman, rather I need to figure out systems that work for me right now!).  

OK, enough of the pep talk.  It's Sunday and I'm having fun and let's have fun on the computer (while sipping tea and munching on graham crackers + chocolate).

--	--	--	--

cookie setup on in index.js:

router.get('/'...)
	// print onto terminal browser's cache of cookies:
	console.log("Cookies from browser: ", req.cookies);
	// store browser's cache of cookies onto server variable: 
	cookie_var = req.cookies;
	// print onto terminal the server variable: 
	console.log("cookie_var: ", cookie_var);

router.get('/cookie', function(req,res){
	// CE: after discussion w/ Jim, set up proto-code for creating a more dynamic cookie that iterates with each page load: 
	// sets the initial cookie, with default value of 0: 
	res.setHeader('Set-Cookie', cookie.serialize('page_loads', '0'));
	// creates a temp variable that stores the value of the key page_loads: 
	var cookie_temp_var = req.cookies.page_loads;
	// convert temp string variable into an iteratable integer: 
	cookie_var = parseInt(cookie_temp_var);
	// iterate cookie_var by one: 
	cookie_var += 1;
	// send the iterated integer cookie_var back to the browser's cookie storage, being sure to convert the integer back to a string: 
	res.setHeader('Set-Cookie', cookie.serialize('page_loads', cookie_var.toString()));
	// send a message to the web page to let the user know something happened: 
	res.send('Cookie\'s sent!');
});

router.get('/clearcookie', function(req,res){
	// remove page_loads cookie from browser cache (and subsequently from the server's attempts to access browser's cache): 
	res.clearCookie('page_loads');
	// send a message to the web page to let the user know something happened: 
	res.send('Cookie deleted');
});

--	--	--	--

Various notes files: 
cookies_a.js & cookies_b.js
[1 commit]
1) playing around with cookies and db-style objects to see what I can learn about / what questions I can generate regarding saving cookie data on server-side db table

cookies_c.js
created 2017-08-24 --> the last day I touched cookies
[2 relevant commits]

1) commiting pseudocode and brainstormings re how to create more sophisticated / robust / relevant / apt cookie setup for saving page loads (and moving forward towards cookies for authentication and login). whew! i've got lots to do but my brain's pooped at this point!

2) more pseudocode changes

--	--	--	--

I think what I've got laid out on cookies_c.js is valuable but missing some important focus points.  I seem to be focusing on the page-load-tracking, and that's good and valuable to figure out. But for some reason right now I'm more inspired to figure out the session key. The unique identifier shared by the browser and the server / database to figure out who's who and validate that the pieces are cleared to talk to each other (and about what subject). The keyword that the lawyer and the city department share with each other to know that they're talking about the case of Runcible B Spoon. Or something. 

browser cookie key = 1000

if (no cookie) {
	set cookie (iterate existing largest cookie by 1)
	define it in the browser
	define it in the db
	update the page_load data by 1 (b/c presumably i've visited the page for the first time, which means i've loaded the page once)
} else () {
	do normal workflow (whatever that may be): perhaps: 
	update the page_load data by 1: if I'm hitting this block of code, surely i'm refreshing or visiting the page, which means i should iterate the page load count by 1.
}

==	==	==	==

Taking a moment to remember where my brain was at the last time I touched this idea, I think I need to take a step or two back before trying to pseudocode at this level. The workflow and placement of the cookies is still a bit mystifying to me -- it's far from internalized to the extent needed to write code around it. Perhaps I should take some time to think about the workflow of cookies are, and to perhaps attempt to diagram it or quantify it or something so that I can further tease out where gaps in my knowledge may lie. I could re-listen to the audio I captured from my discussion w/ Jim some time ago, to try to remember how he described things and to reset my level of understanding to where I was at that point. I could also try to look up internet suggestions for creating a page-load cookie tracker -- maybe it would provide valuable insights, even if it may be for a different context or language. All good thoughts I think. 

Is there anything else I want to do with this today? Maybe not -- it's Sunday and I want to chill out a bit. But I'm really glad I touched on this idea, got my mind jogging a bit, and invested in some preparation for getting the ball rolling on Monday. I suppose my next step after this may be to try to figure out an action plan for the remainder of my Sunday and going into Monday...

==	==	==	==	==	==	==	==	==	==
2017/09/11 MONDAY

Reviewing Recorded words w/ Jim re cookies

==> whew, it's taking me 25 minutes to review and annotate 8 minutes of Jim's words re Express setup <==

==> ha! second pomodoro: I got through 12 minutes of JIm-speak this time :-) <==

Huzzah: I'm finally finished up with listening to and transcribing notes based on Jim's cookie lecture given on 23 Aug. It took me nearly 2.5 hours to get through less than 1 hour of live words. So curious. But I much better understand things now: being able to transcribe and diagram and rewind and relisten to key phrases or confusing points made a big difference.  I Khan Academy'd Jim's lecture!  :-D  And I learned more about Express and I learned more about cookie infrastructure and that's all good: I received my desired effect, which was to gain incrementally more understanding of how cookies work and get ideas for how to set them up.  I'll take photos of my hand-written notes and include them in my notes page for future reference possibilities.  

So what are my thoughts? How to move forward? Well, I could begin by making a simple dictionary of a dictionary, and other database-side playings-with-it. 

==	==	==	==

hp:firefox				->	session key: 'UUID2300'
hp:chrome					-> 	session key: 'UUID2400'
moto:firefos			->	session key: 'UUID2500'
library:explorer	->	session key: 'UUID2600'

in this case I'm only storing page loads for each browser session. I'm not storing username password data for unique and secured user experience. So try to keep my mindframe as simplified as possible -- don't overthing things into super fancy secured user setup.

ID | COOKIE_KEY_SESSION_DATA
--------------------------------------------
00 | {'secret_cookie_id': {'page_loads': 0}}

Or, what about this???: 
{'session_token': 'abc123', 'session_data': {'key1':'value1', 'key2':'value2', 'key3':'value3'}}


--	--	--	--

Try to answer some of my questions and come across wikipedia page on cookies -- interesting stuff as i browsed down, especially the 'alternatives to cookies' section: I've been using some of those for a long time now without really realizing that i was using cookie-style setup!
https://en.wikipedia.org/wiki/HTTP_cookie

--	--	--	--

OK, I'm giving up on this particular question for now. Since my use case is so simple, and to allow me to move forward on other tasks, I'll create my own home-cooked database table setup. I can always change it later!

ID | SESSION_ID | SESSION_DATA
----------------------------------------
00 | 'abc123'		| '{"page_loads":00}' (' and " must follow this convention)

or 

ID | SESSION_ID | PAGE_LOADS
-------------------------------
00 | 'abc123'		| 00

^^(this is simpler for now)^^
  (unless the cookie format
    / setup adds jankiness)

--	--	--

	˅˅JIM˅˅
	---
	JSON-ify:
	'{cookie_key:{session_data:value}}'

	get JSON library? use built-in?

	- legit key from browser to server
	- query db table to find relevant row
	- from that row, i'd glean out session_data column: long string
	- 1)using JSON parsing infrastructure: parse out long string into an object
	- 2)read 'page_loads' member of the object and use in the render
	- 3)increment 'page_loads' data by 1 and write value to page_loads member of object
	- JSON-ify the live data
	- write updated 'page_loads' data back to db table (db.all UPDATE)
	- also show on web browser .ejs (res.render live-session-data variable)

	1)live_session_data = parseJSON(query_column_string);
	2)send_load_count_to_renderer(live_session_data.page_loads);
	3)live_session_data.page_loads += 1; //write-back incremented value to object

	---
	^^JIM^^
==	==	==	==

OK, now what else to consider? I don't want to officially setup my db table until I brainstorm some of the other aspects of the setup. 

I want each router.get or router.post to call a function that increments the page_loads by 1. And I don't even necessarily need to access a db table at this stage: I could save the page_load data in the global variables section. the cookie would get lost each time i close the server, but it could be a first-step version of my soluiton.

So which pages count as 'loads'? Whenver I see a new page on the browser (via a .ejs page), or each time a new section on server is pinged? I think starting out I only want to keep track of 'physical' pages that I see loaded or refreshed on the web browser. but maybe i could later include server-side / express pings for some of the behind-the-scenes brains that get pinged when i perform certain actions... So which URL handlers does that include? 
	router.get('/form'...)
	router.get('/form_update'...)
	router.get('/'...)
Wow, just those three, huh? What a simple website I've got!  Yeah, because the other options are router.post's. 

==	==	==	==

check out JSON after Jim helps me out above
read some here: https://www.w3schools.com/js/js_json_syntax.asp

https://www.w3schools.com/js/js_json_parse.asp
var obj = JSON.parse('{ "name":"John", "age":30, "city":"New York"}'); 

https://www.w3schools.com/js/js_json_stringify.asp
Imagine we have this object in JavaScript:
var obj = { "name":"John", "age":30, "city":"New York"};

Use the JavaScript function JSON.stringify() to convert it into a string.
var myJSON = JSON.stringify(obj);


